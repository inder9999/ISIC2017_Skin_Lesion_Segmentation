# -*- coding: utf-8 -*-
"""FCRN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HQekMl-38dNxZtuGskCBf3g90tuoxf0b
"""

class FCRN(nn.Module) :
  def __init__(self,in_ch,n_classes,n_blocks) :
    super(FCRN,self).__init__()
    self.in_channels=in_ch
    self.n_classes=n_classes
    self.n_blocks=n_blocks
    ndf=64

    self.conv1 = nn.Sequential(nn.Conv2d(self.in_channels, ndf, kernel_size=7,stride=2),
                       nn.BatchNorm2d(ndf),
                       nn.ReLU(True))                           

    self.maxpool = nn.MaxPool2d(kernel_size=3,stride=2)

    resblocks1 = [ResnetBlock(ndf,256,use_dropout=False, require_downsampling=False)]
    ndf=256
    for i in range(n_blocks//3-1) :
      resblocks1 += [ResnetBlock(ndf,ndf,use_dropout=False, require_downsampling=False)]
    self.resblocks1 = nn.Sequential(*resblocks1)  


    resblocks2 = [ResnetBlock(256,512,use_dropout=False, require_downsampling=True)]
    ndf=512
    for i in range(n_blocks//3-1) :
      resblocks2 += [ResnetBlock(ndf,ndf,use_dropout=False, require_downsampling=False)]
    self.resblocks2 = nn.Sequential(*resblocks2)

    
    resblocks3 = [ResnetBlock(ndf,2*ndf,use_dropout=False, require_downsampling=True)]
    ndf=2*ndf
    for i in range(n_blocks//3-1) :
      resblocks3 += [ResnetBlock(ndf,ndf,use_dropout=False, require_downsampling=False)]
    self.resblocks3 = nn.Sequential(*resblocks3)
    
    self.reduction = nn.Sequential(nn.Conv2d(ndf, n_classes, kernel_size=1),
                       nn.BatchNorm2d(n_classes),
                       nn.ReLU(True))

    self.upscale1 = nn.Sequential(nn.ConvTranspose2d(n_classes, n_classes, kernel_size=3,stride=2),
                       nn.BatchNorm2d(n_classes),
                       nn.ReLU(True))                  

    self.upscale2 = nn.Sequential(nn.ConvTranspose2d(n_classes, n_classes, kernel_size=3,stride=2),
                       nn.BatchNorm2d(n_classes),
                       nn.ReLU(True)) 

    self.upscale3 = nn.Sequential(nn.ConvTranspose2d(n_classes, n_classes, kernel_size=3,stride=4),
                       nn.BatchNorm2d(n_classes),
                       nn.ReLU(True))
    
    self.resize2 = nn.Sequential(nn.Conv2d(512, 2, kernel_size=1,stride=1),
                       nn.BatchNorm2d(2),
                       nn.ReLU(True))
    
    self.resize1 = nn.Sequential(nn.Conv2d(256, 2, kernel_size=1,stride=1),
                       nn.BatchNorm2d(2),
                       nn.ReLU(True))

  def forward(self,x) :
    out = self.conv1(x)
    out = self.maxpool(out)
    out_1 = self.resblocks1(out)
    out_2 = self.resblocks2(out_1)
    out = self.resblocks3(out_2)
    out = self.reduction(out)
    out = self.upscale1(out)
    out = nn.ReflectionPad2d((0, 1, 0, 0))(out)
    out = out+ self.resize2(out_2)
    out = self.upscale2(out)
    out = out + self.resize1(out_1)
    out = nn.ReflectionPad2d((1,2,1,2))(out)
    out = self.upscale3(out)
    out = out[:,:,1:-2,1:-2]

    return out