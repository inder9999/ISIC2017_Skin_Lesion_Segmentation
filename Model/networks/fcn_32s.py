# -*- coding: utf-8 -*-
"""FCN_32s.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HQekMl-38dNxZtuGskCBf3g90tuoxf0b
"""

class FCN32s(nn.Module) :
  def __init__(self,in_ch=3,n_classes=2) :
    super(FCN32s,self).__init__()
    self.in_channels=in_ch
    self.n_classes=n_classes

    self.conv1 = nn.Sequential(
      nn.Conv2d(3,64,3,padding=100),
      nn.ReLU(inplace=True),
      nn.Conv2d(64,64,3,padding=1),
      nn.ReLU(inplace=True),
      nn.MaxPool2d(2,stride=2,ceil_mode=True)
      )

    self.conv2 = nn.Sequential(
      nn.Conv2d(64,128,3,padding=1),
      nn.ReLU(inplace=True),
      nn.Conv2d(128,128,3,padding=1),
      nn.ReLU(inplace=True),
      nn.MaxPool2d(2,stride=2,ceil_mode=True)
      )

    self.conv3 = nn.Sequential(
      nn.Conv2d(128,256,3,padding=1),
      nn.ReLU(inplace=True),
      nn.Conv2d(256,256,3,padding=1),
      nn.ReLU(inplace=True),
      nn.Conv2d(256,256,3,padding=1),
      nn.ReLU(inplace=True),
      nn.MaxPool2d(2,stride=2,ceil_mode=True)
      )

    self.conv4 = nn.Sequential(
      nn.Conv2d(256,512,3,padding=1),
      nn.ReLU(inplace=True),
      nn.Conv2d(512,512,3,padding=1),
      nn.ReLU(inplace=True),
      nn.Conv2d(512,512,3,padding=1),
      nn.ReLU(inplace=True),
      nn.MaxPool2d(2,stride=2,ceil_mode=True)
      )

    self.conv5 = nn.Sequential(
      nn.Conv2d(512,512,3,padding=1),
      nn.ReLU(inplace=True),
      nn.Conv2d(512,512,3,padding=1),
      nn.ReLU(inplace=True),
      nn.Conv2d(512,512,3,padding=1),
      nn.ReLU(inplace=True),
      nn.MaxPool2d(2,stride=2,ceil_mode=True)
      )   

    self.conv6 = nn.Sequential(
      nn.Conv2d(512,4096,7),
      nn.ReLU(inplace=True),
      nn.Dropout2d()
      )          

    self.conv7 = nn.Sequential(
      nn.Conv2d(4096,4096,1),
      nn.ReLU(inplace=True),
      nn.Dropout2d()
      )

    self.score = nn.Conv2d(4096,n_classes,1)
    self.upsample32x = nn.ConvTranspose2d(n_classes,n_classes,64,stride=32,bias=False)

  def forward(self,x) :
    output=self.conv1(x)
    output=self.conv2(output)
    output=self.conv3(output)
    output=self.conv4(output)
    output=self.conv5(output)
    output=self.conv6(output)
    output=self.conv7(output)
    output=self.score(output)
    output=self.upsample32x(output)
    output=output[:,:,19:19+x.size()[2],19:19+x.size()[3]]

    return output